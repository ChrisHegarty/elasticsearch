/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
apply plugin: 'elasticsearch.publish'
apply plugin: 'elasticsearch.mrjar'

dependencies {

}

sourceSets.main.java.srcDirs += ['src/main21/gen/']

tasks.named('forbiddenApisMain').configure {
  replaceSignatureFiles 'jdk-signatures'
}

tasks.named('checkstyleMain21').configure {
  // these are generated files, do not conform to checkstyle
  excludes = [ "org/elasticsearch/vec/internal/gen/**"]
}

spotless {
  java {
    // these are generated files, do not conform to spotless
    targetExclude "src/main21/java/org/elasticsearch/vec/internal/gen/**.java"
  }
}

tasks.named('forbiddenApisMain21').configure {
  // TODO: figure out how to allow preview apis
  enabled = false
}

// This task is deliberately not depended upon. Run it manually if you
// change the interface between native and java, i.e. if you change a
// signature in vec.h.
//   ./gradlew :libs:elasticsearch-vec:generateExtractedHeaders
tasks.register("generateExtractedHeaders", Exec).configure {
  description "Regenerate extracted headers"

  def jextractHome = System.getenv("JEXTRACT_HOME")
  if (jextractHome == null || jextractHome.isEmpty())
     throw new IllegalArgumentException("JEXTRACT_HOME not set")
  def genIncludes = file("includes.txt")
  def genHeader = file("native/src/vec/headers/vec.h")
  def genOutput = file("src/main21/java/")

  inputs.files genIncludes, genHeader
  outputs.dir genOutput

  executable = "${jextractHome}/bin/jextract"
  args = [
    "--output", "${genOutput}",
    "--source", "@${genIncludes}",
    "-t" , "org.elasticsearch.vec.internal.gen",
    "${genHeader}"
  ]
}
