/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */


import org.elasticsearch.gradle.transform.UnzipTransform
import org.gradle.api.internal.artifacts.ArtifactAttributes

import java.util.stream.Collectors

apply plugin: 'elasticsearch.build'
apply plugin: 'elasticsearch.publish'

java {
  modularity.inferModulePath = true
}

tasks.named('compileJava') {
  modularity.inferModulePath = true
}

configurations {
  providerImpl {
    attributes.attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, ArtifactTypeDefinition.DIRECTORY_TYPE)
  }
}

dependencies {
  registerTransform(
    UnzipTransform.class, transformSpec -> {
    transformSpec.getFrom().attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, ArtifactTypeDefinition.JAR_TYPE);
    transformSpec.getTo().attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, ArtifactTypeDefinition.DIRECTORY_TYPE);
    transformSpec.parameters(parameters -> {
      parameters.includeArtifactName.set(true)
    })

  })

  api project(':libs:elasticsearch-core')

  providerImpl project(':libs:elasticsearch-x-content:impl')

  testImplementation(project(":test:framework")) {
    exclude group: 'org.elasticsearch', module: 'elasticsearch-x-content'
  }
}

tasks.named('forbiddenApisMain').configure {
  // x-content does not depend on server
  // TODO: Need to decide how we want to handle for forbidden signatures with the changes to core
  replaceSignatureFiles 'jdk-signatures'
}

tasks.named("dependencyLicenses").configure {
  mapping from: /jackson-.*/, to: 'jackson'
}

tasks.named("jarHell").configure { enabled = false }

tasks.named("compileJava").configure {
  options.compilerArgs.add("-Xlint:-missing-explicit-ctor")
}

File generatedResourcesDir = new File(buildDir, 'generated-resources')
def generateProviderManifest = tasks.register("generateProviderManifest") {
  File manifestFile = new File(generatedResourcesDir, "LISTING.TXT")
  inputs.property('jars', configurations.providerImpl)
  outputs.file(manifestFile)
  doLast {
    manifestFile.parentFile.mkdirs()
    manifestFile.setText(configurations.providerImpl.files.stream()
      .map(f -> f.name).collect(Collectors.joining('\n')), 'UTF-8')
  }
}

def generateProviderImpl = tasks.register("generateProviderImpl", Copy) {
  destinationDir = new File(generatedResourcesDir, "impl")
  into("IMPL-JARS/x-content") {
    from(configurations.providerImpl)
    from(generateProviderManifest)
  }
}
sourceSets.main.output.dir(generateProviderImpl)
