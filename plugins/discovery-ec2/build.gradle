import org.elasticsearch.gradle.internal.info.BuildParams

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
apply plugin: 'elasticsearch.internal-yaml-rest-test'
apply plugin: 'elasticsearch.internal-cluster-test'

esplugin {
  description 'The EC2 discovery plugin allows to use AWS API for the unicast discovery mechanism.'
  classname 'org.elasticsearch.discovery.ec2.Ec2DiscoveryPlugin'
}

versions << [
  'aws': '1.11.749'
]

dependencies {
  api "com.amazonaws:aws-java-sdk-ec2:${versions.aws}"
  api "com.amazonaws:aws-java-sdk-core:${versions.aws}"
  api "org.apache.httpcomponents:httpclient:${versions.httpclient}"
  api "org.apache.httpcomponents:httpcore:${versions.httpcore}"
  api "commons-logging:commons-logging:${versions.commonslogging}"
  api "org.apache.logging.log4j:log4j-1.2-api:${versions.log4j}"
  api "commons-codec:commons-codec:${versions.commonscodec}"
  api "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
  api "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
  api "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
  api "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${versions.jackson}"
  api "joda-time:joda-time:2.10.10"
}

restResources {
  restApi {
    include '_common', 'cluster', 'nodes'
  }
}

tasks.named("dependencyLicenses").configure {
  mapping from: /aws-java-sdk-.*/, to: 'aws-java-sdk'
  mapping from: /jackson-.*/, to: 'jackson'
}

esplugin.bundleSpec.from('config/discovery-ec2') {
    into 'config'
}

tasks.register("writeTestJavaPolicy") {
  doLast {
    final File tmp = file("${buildDir}/tmp")
    if (tmp.exists() == false && tmp.mkdirs() == false) {
      throw new GradleException("failed to create temporary directory [${tmp}]")
    }
    final File javaPolicy = file("${tmp}/java.policy")
    if (BuildParams.inFipsJvm) {
      javaPolicy.write(
        [
          "grant {",
          "permission java.security.SecurityPermission \"putProviderProperty.BCFIPS\";",
          "permission java.security.SecurityPermission \"putProviderProperty.BCJSSE\";",
          "permission java.lang.RuntimePermission \"getProtectionDomain\";",
          "permission java.util.PropertyPermission \"java.runtime.name\", \"read\";",
          "permission org.bouncycastle.crypto.CryptoServicesPermission \"tlsAlgorithmsEnabled\";",
          "permission java.lang.RuntimePermission \"accessClassInPackage.sun.security.internal.spec\";",
          "permission java.lang.RuntimePermission \"accessDeclaredMembers\";",
          "permission java.util.PropertyPermission \"intellij.debug.agent\", \"read\";",
          "permission java.util.PropertyPermission \"intellij.debug.agent\", \"write\";",
          "permission org.bouncycastle.crypto.CryptoServicesPermission \"exportSecretKey\";",
          "permission org.bouncycastle.crypto.CryptoServicesPermission \"exportPrivateKey\";",
          "permission java.io.FilePermission \"\${javax.net.ssl.trustStore}\", \"read\";",
          "  permission java.util.PropertyPermission \"com.amazonaws.sdk.ec2MetadataServiceEndpointOverride\", \"write\";",
          "};"
        ].join("\n")
      )
    } else {
      javaPolicy.write(
        [
          "grant {",
          "  permission java.util.PropertyPermission \"com.amazonaws.sdk.ec2MetadataServiceEndpointOverride\", \"write\";",
          "};"
        ].join("\n"))
    }
  }
}

tasks.named("test").configure {
  dependsOn "writeTestJavaPolicy"
  // this is needed for insecure plugins, remove if possible!
  systemProperty 'tests.artifact', project.name

  // this is needed to manipulate com.amazonaws.sdk.ec2MetadataServiceEndpointOverride system property
  // it is better rather disable security manager at all with `systemProperty 'tests.security.manager', 'false'`
  if (BuildParams.inFipsJvm){
    systemProperty 'java.security.policy', "=file://${buildDir}/tmp/java.policy"
  } else {
    systemProperty 'java.security.policy', "file://${buildDir}/tmp/java.policy"
  }
}

tasks.named("check").configure {
  // also execute the QA tests when testing the plugin
  dependsOn 'qa:amazon-ec2:check'
}

tasks.named("thirdPartyAudit").configure {
  ignoreMissingClasses(
          // classes are missing
          'com.amazonaws.jmespath.JmesPathExpression',
          'com.amazonaws.jmespath.ObjectMapperSingleton',
          'software.amazon.ion.IonReader',
          'software.amazon.ion.IonSystem',
          'software.amazon.ion.IonType',
          'software.amazon.ion.IonWriter',
          'software.amazon.ion.Timestamp',
          'software.amazon.ion.system.IonBinaryWriterBuilder',
          'software.amazon.ion.system.IonSystemBuilder',
          'software.amazon.ion.system.IonTextWriterBuilder',
          'software.amazon.ion.system.IonWriterBuilder',
          'javax.servlet.ServletContextEvent',
          'javax.servlet.ServletContextListener',
          'org.apache.avalon.framework.logger.Logger',
          'org.apache.log.Hierarchy',
          'org.apache.log.Logger',
          'javax.xml.bind.DatatypeConverter',
          'javax.xml.bind.JAXBContext',
    'javax.jms.Message',
      'org.apache.logging.log4j.Level',
      'org.apache.logging.log4j.LogManager',
      'org.apache.logging.log4j.Logger',
      'org.apache.logging.log4j.Marker',
      'org.apache.logging.log4j.ThreadContext',
      'org.apache.logging.log4j.ThreadContext$ContextStack',
      'org.apache.logging.log4j.core.Appender',
      'org.apache.logging.log4j.core.ErrorHandler',
      'org.apache.logging.log4j.core.Filter',
      'org.apache.logging.log4j.core.Filter$Result',
      'org.apache.logging.log4j.core.Layout',
      'org.apache.logging.log4j.core.LifeCycle$State',
      'org.apache.logging.log4j.core.LogEvent',
      'org.apache.logging.log4j.core.Logger',
      'org.apache.logging.log4j.core.LoggerContext',
      'org.apache.logging.log4j.core.appender.AbstractAppender',
      'org.apache.logging.log4j.core.appender.AsyncAppender',
      'org.apache.logging.log4j.core.appender.AsyncAppender$Builder',
      'org.apache.logging.log4j.core.appender.ConsoleAppender',
      'org.apache.logging.log4j.core.appender.ConsoleAppender$Builder',
      'org.apache.logging.log4j.core.appender.ConsoleAppender$Target',
      'org.apache.logging.log4j.core.appender.FileAppender',
      'org.apache.logging.log4j.core.appender.FileAppender$Builder',
      'org.apache.logging.log4j.core.appender.NullAppender',
      'org.apache.logging.log4j.core.appender.RollingFileAppender',
      'org.apache.logging.log4j.core.appender.RollingFileAppender$Builder',
      'org.apache.logging.log4j.core.appender.SocketAppender',
      'org.apache.logging.log4j.core.appender.SocketAppender$Builder',
      'org.apache.logging.log4j.core.appender.rewrite.RewriteAppender',
      'org.apache.logging.log4j.core.appender.rewrite.RewritePolicy',
      'org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy',
      'org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy',
      'org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy$Builder',
      'org.apache.logging.log4j.core.appender.rolling.SizeBasedTriggeringPolicy',
      'org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy',
      'org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy$Builder',
      'org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy',
      'org.apache.logging.log4j.core.config.AbstractConfiguration',
      'org.apache.logging.log4j.core.config.AppenderRef',
      'org.apache.logging.log4j.core.config.Configuration',
      'org.apache.logging.log4j.core.config.ConfigurationFactory',
      'org.apache.logging.log4j.core.config.ConfigurationScheduler',
      'org.apache.logging.log4j.core.config.ConfigurationSource',
      'org.apache.logging.log4j.core.config.LoggerConfig',
      'org.apache.logging.log4j.core.config.Property',
      'org.apache.logging.log4j.core.config.Reconfigurable',
      'org.apache.logging.log4j.core.config.builder.api.AppenderComponentBuilder',
      'org.apache.logging.log4j.core.config.builder.api.ComponentBuilder',
      'org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder',
      'org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory',
      'org.apache.logging.log4j.core.config.builder.api.LayoutComponentBuilder',
      'org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder',
      'org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder',
      'org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder',
      'org.apache.logging.log4j.core.config.plugins.util.PluginManager',
      'org.apache.logging.log4j.core.config.plugins.util.PluginType',
      'org.apache.logging.log4j.core.config.status.StatusConfiguration',
      'org.apache.logging.log4j.core.filter.AbstractFilter',
      'org.apache.logging.log4j.core.filter.AbstractFilterable',
      'org.apache.logging.log4j.core.filter.CompositeFilter',
      'org.apache.logging.log4j.core.filter.DenyAllFilter',
      'org.apache.logging.log4j.core.filter.DenyAllFilter$Builder',
      'org.apache.logging.log4j.core.filter.LevelMatchFilter',
      'org.apache.logging.log4j.core.filter.LevelMatchFilter$Builder',
      'org.apache.logging.log4j.core.filter.LevelRangeFilter',
      'org.apache.logging.log4j.core.filter.StringMatchFilter',
      'org.apache.logging.log4j.core.filter.StringMatchFilter$Builder',
      'org.apache.logging.log4j.core.filter.ThresholdFilter',
      'org.apache.logging.log4j.core.impl.Log4jLogEvent',
      'org.apache.logging.log4j.core.impl.Log4jLogEvent$Builder',
      'org.apache.logging.log4j.core.impl.ThrowableProxy',
      'org.apache.logging.log4j.core.layout.AbstractStringLayout',
      'org.apache.logging.log4j.core.layout.ByteBufferDestination',
      'org.apache.logging.log4j.core.layout.Encoder',
      'org.apache.logging.log4j.core.layout.HtmlLayout',
      'org.apache.logging.log4j.core.layout.HtmlLayout$Builder',
      'org.apache.logging.log4j.core.layout.PatternLayout',
      'org.apache.logging.log4j.core.layout.PatternLayout$Builder',
      'org.apache.logging.log4j.core.layout.SyslogLayout',
      'org.apache.logging.log4j.core.layout.SyslogLayout$Builder',
      'org.apache.logging.log4j.core.layout.XmlLayout',
      'org.apache.logging.log4j.core.layout.XmlLayout$Builder',
      'org.apache.logging.log4j.core.lookup.StrSubstitutor',
      'org.apache.logging.log4j.core.net.Facility',
      'org.apache.logging.log4j.core.net.Protocol',
      'org.apache.logging.log4j.core.pattern.LogEventPatternConverter',
      'org.apache.logging.log4j.core.time.Instant',
      'org.apache.logging.log4j.core.time.MutableInstant',
      'org.apache.logging.log4j.core.tools.BasicCommandLineArguments',
      'org.apache.logging.log4j.core.tools.picocli.CommandLine',
      'org.apache.logging.log4j.core.util.Loader',
      'org.apache.logging.log4j.core.util.OptionConverter',
      'org.apache.logging.log4j.core.util.Throwables',
      'org.apache.logging.log4j.core.util.Transform',
      'org.apache.logging.log4j.message.MapMessage',
      'org.apache.logging.log4j.message.Message',
      'org.apache.logging.log4j.spi.AbstractLoggerAdapter',
      'org.apache.logging.log4j.spi.ExtendedLogger',
      'org.apache.logging.log4j.spi.LoggerContext',
      'org.apache.logging.log4j.spi.MutableThreadContextStack',
      'org.apache.logging.log4j.spi.StandardLevel',
      'org.apache.logging.log4j.status.StatusLogger',
      'org.apache.logging.log4j.util.BiConsumer',
      'org.apache.logging.log4j.util.Constants',
      'org.apache.logging.log4j.util.LoaderUtil',
      'org.apache.logging.log4j.util.PropertiesUtil',
      'org.apache.logging.log4j.util.ReadOnlyStringMap',
      'org.apache.logging.log4j.util.Strings',
      'org.apache.logging.log4j.util.TriConsumer'

  )
}
