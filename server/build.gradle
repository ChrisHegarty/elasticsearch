/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import org.elasticsearch.gradle.internal.info.BuildParams

apply plugin: 'elasticsearch.build'
apply plugin: 'elasticsearch.publish'
apply plugin: 'elasticsearch.internal-cluster-test'

publishing {
  publications {
    elastic {
      artifactId 'elasticsearch'
    }
  }
}

archivesBaseName = 'elasticsearch'

dependencies {

  api project(':libs:elasticsearch-core')
  api project(':libs:elasticsearch-secure-sm')
  api project(':libs:elasticsearch-x-content')
  api project(":libs:elasticsearch-geo")
  api project(":libs:elasticsearch-logging")
  api project(":libs:elasticsearch-lz4")

  implementation project(':libs:elasticsearch-plugin-classloader')

  // lucene
  api "org.apache.lucene:lucene-core:${versions.lucene}"
  api "org.apache.lucene:lucene-analysis-common:${versions.lucene}"
  api "org.apache.lucene:lucene-backward-codecs:${versions.lucene}"
  api "org.apache.lucene:lucene-grouping:${versions.lucene}"
  api "org.apache.lucene:lucene-highlighter:${versions.lucene}"
  api "org.apache.lucene:lucene-join:${versions.lucene}"
  api "org.apache.lucene:lucene-memory:${versions.lucene}"
  api "org.apache.lucene:lucene-misc:${versions.lucene}"
  api "org.apache.lucene:lucene-queries:${versions.lucene}"
  api "org.apache.lucene:lucene-queryparser:${versions.lucene}"
  api "org.apache.lucene:lucene-sandbox:${versions.lucene}"
  api "org.apache.lucene:lucene-spatial3d:${versions.lucene}"
  api "org.apache.lucene:lucene-suggest:${versions.lucene}"

  // utilities
  api project(":libs:elasticsearch-cli")
  implementation 'com.carrotsearch:hppc:0.8.1'

  // percentiles aggregation
  api 'com.tdunning:t-digest:3.2'
  // precentil ranks aggregation
  api 'org.hdrhistogram:HdrHistogram:2.1.9'

  // logging
  // api "org.apache.logging.log4j:log4j-api:${versions.log4j}"
  // api "org.apache.logging.log4j:log4j-core:${versions.log4j}"

  api "net.java.dev.jna:jna:${versions.jna}"

  // api "co.elastic.logging:log4j2-ecs-layout:${versions.ecsLogging}"
  // api "co.elastic.logging:ecs-logging-core:${versions.ecsLogging}"

  testImplementation(project(":test:framework")) {
    // tests use the locally compiled version of server
    exclude group: 'org.elasticsearch', module: 'server'
  }
  internalClusterTestImplementation(project(":test:framework")) {
    exclude group: 'org.elasticsearch', module: 'server'
  }

}

tasks.named("forbiddenPatterns").configure {
    exclude '**/*.json'
    exclude '**/*.jmx'
    exclude '**/*.dic'
    exclude '**/*.binary'
    exclude '**/*.st'
}

tasks.named('forbiddenApisMain').configure {
  addSignatureFiles 'hppc-signatures'
}
tasks.named('forbiddenApisTest').configure {
  addSignatureFiles 'hppc-signatures'
}

tasks.named("testingConventions").configure {
    naming.clear()
    naming {
        Tests {
            baseClass "org.apache.lucene.tests.util.LuceneTestCase"
        }
        IT {
            baseClass "org.elasticsearch.test.ESIntegTestCase"
            baseClass "org.elasticsearch.test.ESSingleNodeTestCase"
        }
    }
}

def generateModulesList = tasks.register("generateModulesList") {
    List<String> modules = project(':modules').subprojects.collect { it.name }
    modules.add('x-pack')
    File modulesFile = new File(buildDir, 'generated-resources/modules.txt')
    processResources.from(modulesFile)
    inputs.property('modules', modules)
    outputs.file(modulesFile)
    doLast {
        modulesFile.parentFile.mkdirs()
        modulesFile.setText(modules.join('\n'), 'UTF-8')
    }
}

def generatePluginsList = tasks.register("generatePluginsList") {
    Set<String> plugins = new TreeSet<>(project(':plugins').childProjects.keySet())
    plugins.remove('example')

    File pluginsFile = new File(buildDir, 'generated-resources/plugins.txt')
    processResources.from(pluginsFile)
    inputs.property('plugins', plugins)
    outputs.file(pluginsFile)
    doLast {
        pluginsFile.parentFile.mkdirs()
        pluginsFile.setText(plugins.join('\n'), 'UTF-8')
    }
}

tasks.named("processResources").configure {
    dependsOn generateModulesList, generatePluginsList
}

if (BuildParams.isSnapshotBuild() == false) {
    tasks.named("test").configure {
        systemProperty 'es.index_mode_feature_flag_registered', 'true'
    }
    tasks.named("internalClusterTest").configure {
        systemProperty 'es.index_mode_feature_flag_registered', 'true'
    }
}

tasks.named("thirdPartyAudit").configure {
    ignoreMissingClasses 'javax.xml.bind.DatatypeConverter'
}

tasks.named("dependencyLicenses").configure {
    mapping from: /lucene-.*/, to: 'lucene'
    dependencies = project.configurations.runtimeClasspath.fileCollection {
        it.group.startsWith('org.elasticsearch') == false ||
                // keep the following org.elasticsearch jars in
                (it.name == 'jna' ||
                        it.name == 'securesm')
    }
}

tasks.named("licenseHeaders").configure {
    // Ignore our vendored version of Google Guice
    excludes << 'org/elasticsearch/common/inject/**/*'
    // Ignore temporary copies of impending 8.7 Lucene classes
    excludes << 'org/apache/lucene/search/RegExp87*'
    excludes << 'org/apache/lucene/search/RegexpQuery87*'
}

tasks.named("compileJava").configure {
  options.compilerArgs.add("-Xlint:-missing-explicit-ctor,-requires-automatic,-requires-transitive-automatic")
  options.compilerArgs.add("-Xlint:-exports") // class XXX in module org.elasticsearch.server is not accessible to clients that require this module
}
